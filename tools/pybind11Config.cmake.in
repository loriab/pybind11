# pybind11Config.cmake
# --------------------
#
# PYBIND11 cmake module.
# This module sets the following variables in your project:
#
# ::
#
#   pybind11_FOUND - true if pybind11 and all required components found on the system
#   pybind11_VERSION - pybind11 version in format Major.Minor.Release
#   pybind11_INCLUDE_DIRS - Directory where pybind11 headers are located.
#   pybind11_INCLUDE_DIR - same as DIRS
#
#
# Available components: None
#
#
# Exported targets:
#
# ::
#
# If pybind11 is found, this module defines the following :prop_tgt:`IMPORTED`
# target. Note that python headers and C++ standard (11 or 14) of your choice and
# detection will need to be applied to your code ::
#
#   pybind11::pybind11 - the main pybind11 interface library (i.e., headers) 
#
#   find_package(PythonLibsNew REQUIRED)
#   find_package(pybind11 CONFIG REQUIRED)
#   message(STATUS "Found pybind11: ${pybind11_INCLUDE_DIR} (found version ${pybind11_VERSION})")
#   set_property(TARGET pybind11::pybind11 APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${PYTHON_INCLUDE_DIRS}
#                                                          INTERFACE_COMPILE_OPTIONS "-std=c++11")
#
#
# Suggested usage:
#
# ::
#
#   find_package(pybind11)
#   find_package(pybind11 2.0 EXACT CONFIG REQUIRED)
#
#
# The following variables can be set to guide the search for this package:
#
# ::
#
#   pybind11_DIR - CMake variable, set to directory containing this Config file
#   CMAKE_PREFIX_PATH - CMake variable, set to root directory of this package
#   PATH - environment variable, set to bin directory of this package
#   CMAKE_DISABLE_FIND_PACKAGE_pybind11 - CMake variable, disables
#     find_package(pybind11) when not REQUIRED, perhaps to force internal build

@PACKAGE_INIT@

set(PN pybind11)

# find includes
unset(_temp_h CACHE)
find_path(_temp_h
          NAMES pybind11/pybind11.h
          PATHS ${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_INCLUDEDIR@
          NO_DEFAULT_PATH)
if(_temp_h)
    set(${PN}_INCLUDE_DIR "${_temp_h}")
    set(${PN}_INCLUDE_DIRS ${${PN}_INCLUDE_DIR})
else()
    set(${PN}_FOUND 0)
    if(NOT CMAKE_REQUIRED_QUIET)
        message(STATUS "${PN}Config missing component: header (${PN}: ${_temp_h})")
    endif()
endif()

check_required_components(${PN})

#-----------------------------------------------------------------------------
# Don't include targets if this file is being picked up by another
# project which has already built this as a subproject
#-----------------------------------------------------------------------------
if(NOT TARGET ${PN}::pybind11)
    include("${CMAKE_CURRENT_LIST_DIR}/${PN}Targets.cmake")
endif()

