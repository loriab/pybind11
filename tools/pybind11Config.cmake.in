# pybind11Config.cmake
# ------------------
#
# PYBIND11 cmake module.
# This module sets the following variables in your project:
#
# ::
#
#   pybind11_FOUND - true if pybind11 and all required components found on the system
##   libefp_VERSION - liberp version in format Major.Minor.Release
##   libefp_INCLUDE_DIRS - Directory where libefp header is located.
#   pybind11_INCLUDE_DIR - same as DIRS
##   libefp_DEFINITIONS: Definitions necessary to use libefp, namely USING_libefp.
##   libefp_LIBRARIES - libefp library to link against.
##   libefp_LIBRARY - same as LIBRARIES
##   libefp_FRAGLIB_DIRS - Directories (list) where EFP fragments are located
##
##
## Available components: shared static
##
## ::
##
##   shared - search for only shared library
##   static - search for only static library
##   shallow - search for only fragment library where directory structure has been collapsed
#
#
# Exported targets:
#
# ::
#
# If pybind11 is found, this module defines the following :prop_tgt:`IMPORTED`
# target. ::
#
#   pybind11::pybind11 - the main pybind11 interface library (i.e., headers) with python lib attached.
## todo clarify if py libs or includes attached
#
#
# Suggested usage:
#
# ::
#
#   find_package(pybind11)
##   find_package(libefp 1.3.0 EXACT CONFIG REQUIRED COMPONENTS shared)
##
##
# The following variables can be set to guide the search for this package:
#
# ::
#
#   pybind11_DIR - CMake variable, set to directory containing this Config file
#   CMAKE_PREFIX_PATH - CMake variable, set to root directory of this package
#   PATH - environment variable, set to bin directory of this package
#   CMAKE_DISABLE_FIND_PACKAGE_pybind11 - CMake variable, disables
#     find_package(pybind11) when not REQUIRED, perhaps to force internal build

@PACKAGE_INIT@

set(PN pybind11)
#set (_valid_components
#    static
#    shared
#    shallow
#)

# find includes
unset(_temp_h CACHE)
find_path(_temp_h
          NAMES pybind11/pybind11.h
          PATHS ${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_INCLUDEDIR@
          NO_DEFAULT_PATH)
if(_temp_h)
    set(${PN}_INCLUDE_DIR "${_temp_h}")
#    set(${PN}_INCLUDE_DIRS ${${PN}_INCLUDE_DIR})
else()
    set(${PN}_FOUND 0)
    if(NOT CMAKE_REQUIRED_QUIET)
        message(STATUS "${PN}Config missing component: header (${PN}: ${_temp_h})")
    endif()
endif()

check_required_components(${PN})

#-----------------------------------------------------------------------------
# Don't include targets if this file is being picked up by another
# project which has already built this as a subproject
#-----------------------------------------------------------------------------
if(NOT TARGET ${PN}::pybind11)
    include("${CMAKE_CURRENT_LIST_DIR}/${PN}Targets.cmake")
endif()

